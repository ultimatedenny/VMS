
@using VMS.Web.Models;
@model AppointmentViewModel
<!--Appointment By Security-->
<div class="modal fade" id="modalHostAppointment">
    <div class="modal-dialog  modal-lg ">
        <div class="modal-content">
            <div class="modal-header">
                <a href="#" style="color:white" class="close" data-dismiss="modal">&times;</a>
                <h3 class="modal-title" id="titleHostApppointment">Appointment for </h3>
            </div>
            <div class="modal-body" id="myModalBodyDiv1">
                @using (Ajax.BeginForm("PostSaveAppointment", "Visitor", null,
                                                    new AjaxOptions
                                                    {
                                                        OnSuccess = "onSuccess",
                                                        OnFailure = "onFailure",
                                                        OnBegin = "onProgress",
                                                    }, new { @id = "formSaveAppointment" }))
                {
                    <div class="row">
                        <div class="col-md-4">
                            @Html.HiddenFor(m => m.VisitLog.VisitorId)
                            @Html.LabelFor(m => m.VisitLog.HostId, "Host Name : ")<span style="color:red">* Required</span><br />
                            <div class="k-content">
                                @(Html.Kendo().DropDownListFor(m => m.VisitLog.HostId)
                                            .DataTextField("UseNam").DataValueField("UseID")
                                            .HtmlAttributes(new { style = "width:100%", required = "required", @class = "ShimanoTextBox" })
                                            .Filter("contains")
                                            .DataSource(source =>
                                            {
                                                source.Read(read =>
                                                {
                                                    read.Action("GetHostDetail", "Visitor");
                                                })
                                                .ServerFiltering(false);
                                            }).OptionLabel("Select Host"))
                            </div>
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(m => m.VisitLog.VisitType, "Visitor Type")<span style="color:red">* Required</span>
                            <div class="k-content">


                                @Html.Kendo().DropDownListFor(m => m.VisitLog.VisitType).OptionLabel("Select Visit Type...").HtmlAttributes(new { style = "width: 100%", @class = "form-control", required = "required", data_required_msg = "Please Select the Visit Type" }).DataTextField("VisitorType").DataValueField("Id").DataSource(source => { source.Read(read => { read.Action("getVisitTypeList", "MasterData", new { text = "1" }); }); }).Filter("contains")
                            </div>
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(m => m.VisitLog.Remark, "Remark")
                            <div class="k-content">
                                @Html.TextAreaFor(m => m.VisitLog.Remark, 3, 3, new { @class = "k-textbox", style = "width: 100%; padding:10px", @Value = "NA" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            @Html.HiddenFor(m => m.VisitLog.VisitorId)
                            @Html.LabelFor(m => m.VisitLog.HostDept, "Host Dept : ")<span style="color:red">* Required</span><br />
                                                                                    <div class="k-content">

                                                                                        @(Html.Kendo().DropDownListFor(m => m.VisitLog.HostDept)
                                                                    .DataTextField("Dept").DataValueField("Dept")
                                                                    .HtmlAttributes(new { style = "width:100%", required = "required", @class = "ShimanoTextBox" })
                                                                    .Filter("contains")
                                                                    .DataSource(source =>
                                                                    {
                                                                        source.Read(read =>
                                                                        {
                                                                            read.Action("GetHostDepartment", "Visitor").Data("getddlPlantValue");
                                                                        })
                                                                        .ServerFiltering(false);
                                                                    }).OptionLabel("Select Host Department")
                                                                  )
                                                                                    </div>
                        </div>
                        </div><br />
                        <div class="row">
                            <div class="col-md-6">
                                <button id="btnSaveAppointment" type="submit" class="btn btn-info" onclick="PerformValidation()"><i class="fa fa-save"></i> Save Appointment</button>
                            </div>
                        </div>
                        }

                    </div>
                    <div class="modal-footer">
                        <a href="#" class="btn btn-danger" data-dismiss="modal"><i class="fa fa-times"></i> Close</a>
                    </div>
                </div>
    </div>
</div>
<!--END Appointment By Security-->
<script>
    function CreateAppointment() {
        $('#modalHostAppointment').modal({
            backdrop: "static",
            keyboard: false,
            show: true
        });
        $('#@Html.IdFor(m=> m.VisitLog.VisitorId)').val($('#detailId').val())
        $('#titleHostApppointment').text("Appointment For " + $("#detailName").val())
    }

    function PerformValidation() {
        var Host = $("#@Html.IdFor(model => model.VisitLog.HostId)").val()
        if (Host == "") {
            toastr.error("Field Host Name cannot be blank", "Transaction Failed!!")
            return false;
        }

        var VisitType = $("#@Html.IdFor(model => model.VisitLog.VisitType)").val()
        if (VisitType == "") {
            toastr.error("Field Visitor Type cannot be blank", "Transaction Failed!!")
            return false;
        }

        var Dept = $("#@Html.IdFor(model => model.VisitLog.HostDept)").val()
        if (Dept == "") {
            toastr.error("Field Host Dept cannot be blank", "Transaction Failed!!")
            return false;
        }

    }
</script>
<script id="AppointmentBySecurity">
    function onProgress() {
        Sys.LoadingShow()
    }
    function onSuccess(data) {
        Sys.DialogClose(true)
        if (data.Success) {
            toastr.success(data.Message, 'Success!');
            fnVisitorCheckin($('#detailId').val(), data.data)
        } else {
            ShiMessage.error('Warning!',data.Message)
        }
        $('#btnSaveAppointment').prop('disabled', false);

    }
    function onFailure(data) {
        toastr.warning(data, 'Warning!')
        $('#btnSaveAppointment').prop('disabled', false);
    }
    function getddlPlantValue() {
        return {
            Plant: '@Session["UsePlant"]',
        }
    }
</script>