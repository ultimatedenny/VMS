@using VMS.Library;
@using System.Configuration;
@model VMS.Web.Models.AppointmentViewModel
@using VMS.Web.Models;
@using System.Web.Optimization
@{
    Layout = null;
}

<!DOCTYPE html>

<script id="Time ">
    function startChange() {
        var dtpStartFromDate = $("#dtpStartFromDate").data("kendoDatePicker"),
            startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate());
            endDate = new Date(startDate);
            endDate.setDate(endDate.getDate()); //Modified by CANICE 20210801  endDate.setDate(endDate.getDate() + 14)
            dtpStartFromDate.min(startDate);
            dtpStartFromDate.value(startDate);
            //endPicker.max(endDate); //Commented by CANICE 20210801
        }
    }

    function endChange() {
        var startPicker = $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateEffectiveFrom)").data("kendoDatePicker"),
            endDate = this.value();

        if (endDate) {
            startDate = new Date(endDate);
            startDate.setDate(endDate.getDate()); //Modified by CANICE 20210801 startDate.setDate(endDate.getDate() - 14)
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate());
            startPicker.max(endDate);
            //startPicker.min(startDate); //Commented by CANICE 20210801
        }
    }

</script>
<script id="Time2 ">
    function timeStartChange() {
        var startTime = this.value(),
            dtpStartFromTime = $("#dtpStartFromTime").data("kendoTimePicker");
        dtpRangeStartFromTime = $("#dtpRangeStartFromTime").data("kendoTimePicker");
        dtpRangeEndFromTime = $("#dtpRangeEndFromTime").data("kendoTimePicker");
        if (startTime) {
            startTime = new Date(startTime);
            //endPicker.max(startTime);
            startTime.setMinutes(startTime.getMinutes() + this.options.interval);
            dtpStartFromTime.min(startTime);
            dtpStartFromTime.value(startTime);
            dtpRangeStartFromTime.min(startTime);
            dtpRangeStartFromTime.value(startTime);
            dtpRangeEndFromTime.min(startTime);
            dtpRangeEndFromTime.value(startTime);
        }
    }

</script>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    <link rel="shortcut icon" href="~/Content/new-login-assets/Images/favicon.ico" />
    @Styles.Render("~/Css")
    @Styles.Render("~/kendoCSS")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/kendoJS")
    @*@Scripts.Render("~/Jquery")*@
    @Scripts.Render("~/jQueryVal")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/Js")
    @Scripts.Render("~/Scripts/prototype.js")
    @Scripts.Render("~/Scripts/ShimanoObject.js")
    @Scripts.Render("~/Scripts/ShiMessage.js")
    @Scripts.Render("~/Scripts/sweetalert2/dist/sweetalert2.all.min.js")



    <style>
        html * {
            font-family: Quicksand;
        }

        table.dataTable thead tr {
            background-color: #30505F;
            color: white
        }

        .ShimanoBlackBox {
            background-color: #30505F;
            color: white;
        }

        .ShimanoBox {
            background-color: white;
            color: black;
            box-shadow: 3px 3px 5px grey;
        }

        .ShimanoTextBox {
            border-radius: 10px;
        }

        .ShimanoBorder {
            border: outset 5px #3c8dbc;
        }

        .form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {
            background-color: white;
        }

        .k-content > .k-dropdown, .k-picker-wrap, .k-textbox, .k-multiselect {
            font-size: 14px
        }

        .k-calendar-container, .k-popup, .k-group, .k-reset {
            font-size: 14px
        }

        .load-wrapp {
            float: left;
            width: 100px;
            height: 40px;
            margin: 0 10px 10px 0;
            border-radius: 5px;
            text-align: center;
        }

            .load-wrapp p {
                padding: 0 0 20px;
            }

            .load-wrapp:last-child {
                margin-right: 0;
            }

        .line {
            display: inline-block;
            width: 15px;
            height: 20px;
            border-radius: 15px;
            background-color: #4b9cdb;
        }

        .load-3 .line:nth-last-child(1) {
            animation: loadingC .6s .1s linear infinite;
        }

        .load-3 .line:nth-last-child(2) {
            animation: loadingC .6s .2s linear infinite;
        }

        .load-3 .line:nth-last-child(3) {
            animation: loadingC .6s .3s linear infinite;
        }

        @@keyframes loadingC {
            0 {
                transform: translate(0,0);
            }

            50% {
                transform: translate(0,15px);
            }

            100% {
                transform: translate(0,0);
            }
        }
    </style>

</head>
<body class="hold-transition skin-blue-light  sidebar-mini">
    <div class="wrapper">
        <header class="main-header">
            <a href="@Url.Action("Index", "Dashboard")" class="logo" style="background-color: @ConfigurationManager.AppSettings["BGMenuLive"]">
                <span class="logo-mini"><label id="minilogo"></label></span>
                <span class="logo-lg">
                    <label id="logo"></label><br />
                </span>
            </a>
            <nav class="navbar navbar-static-top" style="background-color: @ConfigurationManager.AppSettings["BGMenuLive"]">
                <a href="#" class="sidebar-toggle" data-toggle="push-menu" role="button">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </a>

                <div class="navbar-custom-menu">
                    <ul class="nav navbar-nav">
                        <li class="dropdown user user-menu">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                <i class="fa fa-user"></i>
                                <span class="hidden-xs">@*@Session["UseNam"]*@</span>
                            </a>
                            <ul class="dropdown-menu">
                                <li class="user-header" style="background-color:@ConfigurationManager.AppSettings["BGMenuLive"];">
                                    <i class="fa fa-2x fa-user"></i>
                                    @if (Sessions.GetUserName() != null)
                                    {
                                        <p>
                                            @Sessions.GetUserName()
                                            <small>@Sessions.GetBusFunc()</small>
                                        </p>
                                        if (bool.Parse(Sessions.GetAuthorisedDelegate()) == true)
                                        {
                                            <button class="btn btn-lg btn-info" onclick="fnShowDelegation('Approver','','self')">Approval Delegation</button>
                                        }
                                        else if (int.Parse(Sessions.GetUseLev()) < 3)
                                        {
                                            <span style="color:white"> Delegate</span>
                                            <input type="checkbox" data-width="100%" id="chkDelegate" data-toggle="toggle" data-on="Active" data-off="Deactive" data-onstyle="success" data-offstyle="danger">
                                        }
                                    }
                                    else
                                    {
                                        <small>NONE</small>
                                    }
                                    @*@Session["UseNam"] - @Session["UseDep"]*@
                                </li>
                                <li class="user-footer">
                                    <div class="pull-left">

                                    </div>
                                    <div class="pull-right">
                                        @if (Sessions.GetUserName() != null)
                                        {
                                            <a href="@Url.Action("Logout", "Home")" class="btn btn-default btn-flat">Sign out</a>
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("Logout", "Home")" class="btn btn-default btn-flat">Sign In</a>
                                        }

                                    </div>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </nav>
        </header>
        <aside class="main-sidebar">
            <section class="sidebar">
                <div class="user-panel">
                    <div class="pull-left image">
                        <i class="fa fa-2x fa-user"></i>
                    </div>
                    <div class="pull-left info">
                        <p>@*@Session["UseNam"]*@</p>
                        <a href="#"><i class="fa fa-circle text-success"></i> Online</a>
                    </div>
                </div>

                @{
                    Html.RenderAction("GetMenuForUser", "Home");
                    //Html.RenderPartial("_SideBar");
                }
            </section>
        </aside>
        <div class="content-wrapper">
            <section class="content" id="page-content">
                @RenderBody()
            </section>
        </div>
        @if (@ConfigurationManager.AppSettings["ShowCopyrightFooter"] == "true")
        {
           <footer class="main-footer ShimanoBlackBox">
            <div class="pull-right hidden-xs">
                VMS
                @*<img src="~/Content/Images/shimanoLogo.png" class="img-responsive" width="200" />*@
            </div>
            <strong>
                Copyright &copy; @DateTime.Now.ToString("yyyy")
                <a href="https://sbm-vmiis/apps">PT SHIMANO BATAM</a>.
            </strong> All rights
            reserved. <b>Version</b> @ConfigurationManager.AppSettings["VersionSystem"]
           </footer>
        }
    </div>
    <div>
    </div>

    <div class="modal fade" id="modalDelegation">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <a href="#" style="color:white" class="close" data-dismiss="modal">&times;</a>
                    <h3 class="modal-title" id="titleHostApppointment">Approval Delegation</h3><label id="lblmethod" style="display: none;"></label><label id="lblparam" style="display: none;"></label>
                </div>
                <div class="modal-body" id="myModalBodyDiv1">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.LabelFor(m => m.ApprovalDelegate.DelegateUseID, "Delegate Name : ")<span style="color:red">* Required</span><br />
                            <div class="k-content">
                                @(Html.Kendo().DropDownListFor(m => m.ApprovalDelegate.DelegateUseID)
                                    .DataTextField("UseNam").DataValueField("UseID")
                                    .HtmlAttributes(new { style = "width:100%", @class = "ShimanoTextBox" })
                                    .Filter("contains")
                                    //.Value(@Sessions.GetUseID())
                                    .DataSource(source =>
                                    {
                                        source.Read(read =>
                                        {
                                            read.Action("GetHostDetail", "Visitor");
                                        })
                                        .ServerFiltering(false);
                                    })
                                    .OptionLabel("Select Delegate")
                                    .HtmlAttributes(new { style="width: 100%"})
                                            )
                            </div>
                        </div>

                    <div class="col-md-12">
                        <br />
                        @Html.Label("Delegate Period : ")<span style="color:red">* Required</span><br />
                        <table>
                            <tr>
                                <td><input type="radio" name="bedStatus" id="StopDelegation" value="StopDelegation"></td>
                                <td>Stop Delegation</td>
                                <td></td>
                            </tr>
                            <tr>
                                <td><input type="radio" name="bedStatus" id="StartFrom" value="StartFrom"></td>
                                <td>Start From </td>
                                <td><input type="datetime-local" id="dtpStartFrom" readonly="true"></td>
                            </tr>
                            <tr>
                                <td><input type="radio" name="bedStatus" id="Range" value="Range"></td>
                                <td>Start DateTime</td>
                                <td><input type="datetime-local" id="StartDatetime" readonly="true"></td>
                            </tr>
                            <tr>
                                <td></td>
                                <td>End DateTime</td>
                                <td><input type="datetime-local" id="EndDatetime" readonly="true"></td>
                            </tr>
                        </table>
                    </div>

                        <div class="col-md-12">
                            @Html.LabelFor(m => m.ApprovalDelegate.DelegateToUseID, "Delegate To : ")<span style="color:red">* Required</span><br />
                            <div class="k-content">
                                @(Html.Kendo().DropDownListFor(m => m.ApprovalDelegate.DelegateToUseID)
                               .DataTextField("UseNam").DataValueField("UseID")
                                    .HtmlAttributes(new { style = "width:100%", @class = "ShimanoTextBox" })
                                    .Filter("contains")
                                .DataSource(source =>
                                {
                                    source.Read(read =>
                                    {
                                        read.Action("GetDelegateTo", "Visitor");
                                    })
                                    .ServerFiltering(false);
                                })
                                .OptionLabel("Select Delegate")
                                )
                            </div>
                        </div>

                        <div class="col-md-12">
                            @Html.LabelFor(m => m.ApprovalDelegate.DelegateRemarks, "Remarks : ")<br />
                            <div class="k-content">
                                @(Html.Kendo().TextBoxFor(m => m.ApprovalDelegate.DelegateRemarks)
                                     .HtmlAttributes(new { style = "width: 100%", @class = "form-control"})
                                )
                            </div>
                        </div>
                    </div><br />
                    <div class="row">
                        <div class="col-md-6">
                            <button id="btnSaveDelegation" onclick="SaveDelegation()" type="submit" class="btn btn-info"><i class="fa fa-save"></i> Save Delegation</button>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <a href="#" class="btn btn-danger" onclick="closeModalDelegation()"><i class="fa fa-times"></i> Close</a>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" tabindex="-1" role="dialog" id="ModalMessageDelegated">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Message:</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="HeaderDelegated">Hi SBM_SUHARJO, your approval has been delegated.</p>

                    <div id="tblDelegated">

                    </div>
                </div>
                <div class="modal-footer">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="col-md-3">
                                <button type="button" class="btn btn-danger" onclick="fnStopDelegation()">Stop Delegation</button>
                            </div>
                            <div class="col-md-3">
                            </div>
                            <div class="col-md-3"></div>
                            <div class="col-md-3">
                                <button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" tabindex="-1" role="dialog" id="ModalMessageDelegator">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Message:</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="HeaderDelegator">Hi SBM_SUHARJO, your approval has been delegated.</p>
                    <div id="tblDelegator">

                    </div>
                </div>
                <div class="modal-footer">
                    @*<button type="button" class="btn btn-danger">Stop Delegation</button>*@
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Ok</button>
                </div>
            </div>
        </div>
    </div>
    @if (TempData["SUCCESSLOGIN"] != null)
    {
        <script type="text/javascript">
                toastr.success('@TempData["SUCCESSLOGIN"]',"SUCCESS");
        </script>
    }
    <script>
            var isCheck = false;
            @*$(function () {
                $('#chkDelegate').change(function () {
                    var isDelegate = $(this).prop('checked');
                    DP.AJaxAll({
                        isDelegate:isDelegate
                    }, '@Url.Action("ChangeDelegate", "Approval")', function (data) {
                        if (data.Success) {
                            if (isCheck) {
                                var word = "Success "
                                    + (isDelegate ? "Active " : "Remove")
                                    + " The Delegate "
                                    + (isDelegate ? "To " : "From ")
                                    + (data.data)
                                toastr.success(word);

                            }
                            else {
                                isCheck = true;
                            }
                        }
                    })
                    $.ajax({
                        url: '@Url.Action("ChangeDelegate", "Approval")',
                        cache: false,
                        type: "POST",
                        data: { isDelegate: isDelegate },
                        success: function (data) {


                        },
                        error: function () {
                            ShiMessage.error("Something wrong with this, please call IT!", "ERROR!");
                        }

                    })
                })
            })*@
            function checkDelegate() {
                $.ajax({
                    url: '@Url.Action("CheckDelegate", "Approval")',
                    cache: false,
                    type: "POST",
                    success: function (data) {
                        if (data.Success === true) {
                            $('#chkDelegate').bootstrapToggle('on')
                        }
                        else {
                            $('#chkDelegate').bootstrapToggle('off')
                        }

                    },
                    error: function () {
                        toastr.error("Something wrong with this, please call IT!", "ERROR!");
                    }

                })
            }
            function checkDelegateAuthorization() {
                $.ajax({
                    url: '@Url.Action("CheckDelegationAuthorization", "User")',
                    cache: false,
                    type: "POST",
                    success: function (data) {
                        if (data.Success === true) {
                            return true;
                        }
                        else {
                            return false;
                        }

                    },
                    error: function () {
                        toastr.error("Something wrong with this, please call IT!", "ERROR!");
                    }

                })
            }
            function RemoveDelegation() {
                if (confirm("Confirm to remove existing delegation?") == true) {
                    DP.AJaxAll(
                        {}
                        , "@Url.Action("RemoveDelegation","User")"
                        , function (data) {
                            if (data.Success) {
                                PopulateDelegation()
                                toastr.success("Success!", data.Message)

                            }
                            else {
                                ShiMessage.error("Error!", data.Message)
                            }
                        })
                }
            };
            function PopulateDelegation() {
                DP.AJaxAll({
                }, "@Url.Action("GetDelegation", "User")", function (data) {
                        (document.getElementById('lblExistingDelegate')).innerText = data[0].DelegateUseID == "" ? "None" : data[0].DelegateUseID;
                        (document.getElementById('lblExistingDelegateName')).innerText = data[0].DelegateUseNam == "" ? "None" : data[0].DelegateUseNam;
                        (document.getElementById('lblExistingEffectiveFrom')).innerText = data[0].DelegateUseID == "" ? "None" : data[0].DelegateEffectiveFrom;
                        (document.getElementById('lblExistingEffectiveTo')).innerText = data[0].DelegateUseID == "" ? "None" : data[0].DelegateEffectiveTo;

                        if (data[0].DelegateUseID == "") {
                            document.getElementById('btnRemoveDelegation').disabled = true;
                        }
                        else {
                            document.getElementById('btnRemoveDelegation').disabled = false;
                        }
                })
            };
            function performDelegateValidation() {
                var DelegateID = $("#@Html.IdFor(model => model.ApprovalDelegate.DelegateUseID)").val();
                var DelegateEffectiveFrom = $("#@Html.IdFor(model => model.ApprovalDelegate.DelegateEffectiveFrom)").val();
                var DelegateEffectiveTo = $("#@Html.IdFor(model => model.ApprovalDelegate.DelegateEffectiveTo)").val();
                var ExistingDelegateID = (document.getElementById('lblExistingDelegate')).innerText;
                if (ExistingDelegateID != "None") {
                    toastr.error("You have existing Delegation. Please remove existing delegation first before you set a new one.", "Save Delegation")
                    return false;
                }
                if (DelegateID == "") {
                    toastr.error("Delegate Name cannot be empty", "Save Delegation")
                    return false;
                }
                if (DelegateEffectiveFrom == "") {
                    toastr.error("Effective Date From cannot be empty", "Save Delegation")
                    return false;
                }
                if (DelegateEffectiveTo == "") {
                    toastr.error("Effective Date To cannot be empty", "Save Delegation")
                    return false;
                }
                return true;
            };
            function SaveDelegation() {
                var returnStopDelegation = $('#StopDelegation').is(':checked') ? 1 : 0;
                var returnStartFrom = $('#StartFrom').is(':checked') ? 1 : 0;
                var returnRange = $('#Range').is(':checked') ? 1 : 0;
                var DelegateEffectiveFrom = "";
                var DelegateEffectiveTo = "";
                if (returnStopDelegation == 0 && returnStartFrom == 0 && returnRange == 0) {
                    toastr.error("Please selected Delegation Period!");
                    return;
                }
                else if (returnStartFrom == 1 ){
                    if ($("#dtpStartFrom").val() == ""){
                        toastr.error("Please select Start From");
                        return;
                    }
                    else if ($("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").val() == "") {
                        toastr.error("Please select Delegator Approver.");
                        return;
                    }
                    else {
                        DelegateEffectiveFrom = $("#dtpStartFrom").val();
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("SaveDelegation", "User")',
                            data: {
                                UseID: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").val(),
                                DelegateUseID: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(),
                                DelegateEffectiveFrom: DelegateEffectiveFrom.slice(0, 19).replace('T', ' '),
                                DelegateEffectiveTo: "",
                                DelegationRemarks: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val()
                            },
                            success: function (data) {
                                if (data.Success === true) {
                                    toastr.success("Successfully save delegation.", "Save Delegation");
                                    $('#modalDelegation').modal({
                                        show: false
                                    });
                                    fnShowDelegation($("#lblmethod").text(), '', $("#lblparam").text());
                                    RetrieveData();
                                }
                                else {
                                    toastr.error(data.Message, "Failed save to database!");
                                }
                            },
                            error: function () {
                                toastr.error("Something wrong with this, please call IT!", "Save Delegation");
                            }
                        });
                    }
                }
                else if (returnStopDelegation ==1)
                {
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value("");
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("SaveDelegation", "User")',
                        data: {
                            UseID: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").val(),
                            DelegateUseID: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(""),
                            DelegateEffectiveFrom: "",
                            DelegateEffectiveTo: "",
                            DelegationRemarks: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val()
                        },
                        success: function (data) {
                            if (data.Success === true) {
                                toastr.success("Successfully save delegation.", "Save Delegation");
                                $('#modalDelegation').modal({
                                    show: false
                                });
                                fnShowDelegation($("#lblmethod").text(), '', $("#lblparam").text());
                                RetrieveData();
                            }
                            else {
                                toastr.error(data.Message, "Failed save to database!");
                            }

                        },
                        error: function () {
                            toastr.error("Something wrong with this, please call IT!", "Save Delegation");
                        }
                    });
                    @*console.log("Jalankan Query update.");
                    console.log($("#@Html.IdFor(model => model.ApprovalDelegate.DelegateUseID)").val(), DelegateEffectiveFrom.slice(0, 19).replace('T', ' '), DelegateEffectiveTo.slice(0, 19).replace('T', ' '), $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").val());*@
                }
                else if (returnRange == 1)
                {
                    if ($("#StartDatetime").val() == "" || $("#EndDatetime").val() == "")
                    {
                        toastr.error("Please select Start DateTime and End DateTime.");
                        return;
                    }
                    else if ($("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").val() == "") {
                        toastr.error("Please select Delegator Approver.");
                        return;
                    }
                    else {
                        DelegateEffectiveFrom = $("#StartDatetime").val();
                        DelegateEffectiveTo = $("#EndDatetime").val();
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("SaveDelegation", "User")',
                            data: {
                                UseID: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").val(),
                                DelegateUseID: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(),
                                DelegateEffectiveFrom: DelegateEffectiveFrom.slice(0, 19).replace('T', ' '),
                                DelegateEffectiveTo: DelegateEffectiveTo.slice(0, 19).replace('T', ' '),
                                DelegationRemarks: $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val(),
                                //DelegateUseID: DelegateID, DelegateEffectiveFrom: DelegateEffectiveFrom, DelegateEffectiveTo: DelegateEffectiveTo
                            },
                            success: function (data) {
                                if (data.Success === true) {
                                    toastr.success("Successfully save delegation.", "Save Delegation");
                                    $('#modalDelegation').modal({
                                        show: false
                                    });
                                    fnShowDelegation($("#lblmethod").text(), '', $("#lblparam").text());
                                    RetrieveData();
                                }
                                else {
                                    toastr.error(data.Message, "Failed save to database!");
                                }

                            },
                            error: function () {
                                toastr.error("Something wrong with this, please call IT!", "Save Delegation");
                            }
                        });
                        @*console.log("Jalankan Query update.");
                        console.log($("#@Html.IdFor(model => model.ApprovalDelegate.DelegateUseID)").val(), DelegateEffectiveFrom.slice(0, 19).replace('T', ' '), DelegateEffectiveTo.slice(0, 19).replace('T', ' '), $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").val());*@
                    }
                }
                else if ($("#@Html.IdFor(model => model.ApprovalDelegate.DelegateUseID)").val() == "")
                {
                    toastr.error("Please select Delegate Name");
                    return;
                }
                else
                {
                    //console.log("Jalankan Query update.");
                    @*console.log($("#@Html.IdFor(model => model.ApprovalDelegate.DelegateUseID)").val(), DelegateEffectiveFrom.slice(0, 19).replace('T', ' '), DelegateEffectiveTo.slice(0, 19).replace('T', ' '), $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").val());*@
                }
            };
            function fnShowDelegation(method, userID, param) {
                var useID;
                if (method == "Approver" && param == 'self')
                {
                    $("#lblmethod").text("Approver");
                    $("#lblparam").text("self");
                    var Choose = "";
                    var DelegateToUseID = "";
                    var DelegateRemarks = "";
                    var DelegateEffectiveFrom = "";
                    var DelegateEffectiveTo = "";
                    useID = '@Session["UseID"]';
                    $.ajax({
                        url: '@Url.Action("GetDetailDelegation", "User")',
                        method: "POST",
                        dataType: "JSON",
                        data: {
                            UserID: useID,
                        },
                        success: function (j) {
                            Choose = j.xdataTable.DelegationPeriod;
                            DelegateToUseID = j.xdataTable.DelegateUseID;
                            DelegateRemarks = j.xdataTable.DelegateRemarks;
                            DelegateEffectiveFrom = j.xdataTable.DelegateEffectiveFrom;
                            DelegateEffectiveTo = j.xdataTable.DelegateEffectiveTo;
                            $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").readonly();
                            $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").value(j.xdataTable.UseID);
                            if (Choose == "StopDelegation") {
                                $("#dtpStartFrom").prop("readonly", true);
                                $("#StartDatetime").prop("readonly", true);
                                $("#EndDatetime").prop("readonly", true);
                                $("#StopDelegation").prop('checked', true);
                                $("#StartFrom").prop('checked', false);
                                $("#Range").prop('checked', false);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value("");
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val("");//
                            }
                            else if (Choose == "StartFrom") {
                                $("#dtpStartFrom").prop("readonly", false);
                                $("#StartDatetime").prop("readonly", true);
                                $("#EndDatetime").prop("readonly", true);
                                $("#StopDelegation").prop('checked', false);
                                $("#StartFrom").prop('checked', true);
                                $("#Range").prop('checked', false);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(DelegateToUseID);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val(j.xdataTable.DelegateRemarks);
                                $("#dtpStartFrom").val(DelegateEffectiveFrom);
                            }
                            else if (Choose == "Range") {
                                $("#dtpStartFrom").prop("readonly", true);
                                $("#StartDatetime").prop("readonly", false);
                                $("#EndDatetime").prop("readonly", false);
                                $("#StopDelegation").prop('checked', false);
                                $("#StartFrom").prop('checked', false);
                                $("#Range").prop('checked', true);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(DelegateToUseID);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val(DelegateRemarks);
                                $("#StartDatetime").val(DelegateEffectiveFrom);
                                $("#EndDatetime").val(DelegateEffectiveTo);
                            }
                        },
                        error: function (xhr, error, text) {
                            toastr.error("Failed Query Get View Table, Please contact IT")
                        }
                    });
                    $('#modalDelegation').modal({
                        backdrop: "static",
                        keyboard: false,
                        show: true
                    });
                }
                else if (method == "Add" && param == "HRA")
                {
                    $("#lblmethod").text("Add");
                    $("#lblparam").text("HRA");
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").readonly(false);
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").value("");
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value("");
                    $("#dtpStartFrom").prop("readonly", true);
                    $("#StartDatetime").prop("readonly", true);
                    $("#EndDatetime").prop("readonly", true);
                    $('input:radio[name=bedStatus]').prop('checked', false);
                    $("#StopDelegation").attr('checked', false);
                    $("#StartFrom").attr('checked', false);
                    $("#Range").attr('checked', false);
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val("");
                    $('#modalDelegation').modal({
                        backdrop: "static",
                        keyboard: false,
                        show: true
                    });
                }
                else
                {
                    $("#lblmethod").text("Edit");
                    $("#lblparam").text("");
                    var Choose = "";
                    var DelegateToUseID = "";
                    var DelegateRemarks = "";
                    var DelegateEffectiveFrom = "";
                    var DelegateEffectiveTo = "";
                    useID = $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").val();
                    $.ajax({
                        url: '@Url.Action("GetDetailDelegation", "User")',
                        method: "POST",
                        dataType: "JSON",
                        data: {
                            UserID: userID,
                        },
                        success: function (j) {
                            Choose = j.xdataTable.DelegationPeriod;
                            DelegateToUseID = j.xdataTable.DelegateUseID;
                            DelegateRemarks = j.xdataTable.DelegateRemarks;
                            DelegateEffectiveFrom = j.xdataTable.DelegateEffectiveFrom;
                            DelegateEffectiveTo = j.xdataTable.DelegateEffectiveTo;
                            $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").readonly();
                            $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").value(userID);
                            if (Choose == "StopDelegation") {
                                $("#dtpStartFrom").prop("readonly", true);
                                $("#StartDatetime").prop("readonly", true);
                                $("#EndDatetime").prop("readonly", true);
                                $("#StopDelegation").prop('checked', true);
                                $("#StartFrom").prop('checked', false);
                                $("#Range").prop('checked', false);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value("");
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val("");//
                            }
                            else if (Choose == "StartFrom") {
                                $("#dtpStartFrom").prop("readonly", false);
                                $("#StartDatetime").prop("readonly", true);
                                $("#EndDatetime").prop("readonly", true);
                                $("#StopDelegation").prop('checked', false);
                                $("#StartFrom").prop('checked', true);
                                $("#Range").prop('checked', false);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(DelegateToUseID);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val(j.xdataTable.DelegateRemarks);
                                $("#dtpStartFrom").val(DelegateEffectiveFrom);
                            }
                            else if (Choose == "Range") {
                                $("#dtpStartFrom").prop("readonly", true);
                                $("#StartDatetime").prop("readonly", false);
                                $("#EndDatetime").prop("readonly", false);
                                $("#StopDelegation").prop('checked', false);
                                $("#StartFrom").prop('checked', false);
                                $("#Range").prop('checked', true);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value(DelegateToUseID);
                                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val(DelegateRemarks);
                                $("#StartDatetime").val(DelegateEffectiveFrom);
                                $("#EndDatetime").val(DelegateEffectiveTo);
                            }
                        },
                        error: function (xhr, error, text) {
                            toastr.error("Failed Query Get View Table, Please contact IT")
                        }
                    });
                    $('#modalDelegation').modal({
                        backdrop: "static",
                        keyboard: false,
                        show: true
                    });
                }

            }
            function closeModalDelegation()
            {
                $("#lblmethod").text("");
                $("#lblparam").text("");
                $("#dtpStartFrom").prop("readonly", true);
                $("#StartDatetime").prop("readonly", true);
                $("#EndDatetime").prop("readonly", true);
                $('input:radio[name=bedStatus]').prop('checked', false);
                $("#StopDelegation").attr('checked', false);
                $("#StartFrom").attr('checked', false);
                $("#Range").attr('checked', false);
                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateUseID)").data("kendoDropDownList").readonly(true);
                $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val("");
                $('#modalDelegation').modal('hide');
            }
            function getLogo()
            {
                $.ajax({
                    url: '@Url.Action("GetLogo", "MasterData")',
                    cache: false,
                    type: "POST",
                    data: { },
                    success: function (data) {
                        $('#minilogo').text(data.xdataTable[0].Company);
                        $('#logo').text(data.xdataTable[0].Company);
                    },
                    error: function (data) {
                        toastr.error("Please Call IT");
                    }
                });
            }
    </script>
    <script>
        $(document).ready(function () {
            var delefate = false;
            getLogo();
            checkDelegate();
            PopulateDelegation();
            const now = (new Date().toLocaleString("sv-SE") + '').replace(' ', 'T').substring(0, 16);

            $("#dtpStartFrom").attr('min', now);
            $("#StartDatetime").attr('min', now);
            $("#EndDatetime").attr('min', now);
            //var localdate = (dNow.getMonth() + 1) + '/' + dNow.getDate() + '/' + dNow.getFullYear() + 'T' + dNow.getHours() + ':' + dNow.getMinutes() + ':' + dNow.getSeconds();
            //$(".Navigation").click(function (e) {
            //    e.preventDefault(); // prevent default link button redirect behaviour
            //    var url = $(this).attr("href");
            //    $('#page-content').load(url);
            //});
            $('input:radio[name=bedStatus]').change(function () {
                if (this.value == 'StopDelegation') {
                    $("#dtpStartFrom").prop("readonly", true);
                    $("#StartDatetime").prop("readonly", true);
                    $("#EndDatetime").prop("readonly", true);
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateToUseID)").data("kendoDropDownList").value("");
                    $("#@Html.IdFor(m => m.ApprovalDelegate.DelegateRemarks)").val("");
                }
                else if (this.value == 'StartFrom') {
                    $("#dtpStartFrom").prop("readonly", false);
                    $("#StartDatetime").prop("readonly", true);
                    $("#EndDatetime").prop("readonly", true);
                    $("#dtpStartFrom").val(now);
                    $("#dtpStartFrom").attr('min', now);
                    //alert($("#dtpStartFrom").val().slice(0, 19).replace('T', ' '))
                }
                else if (this.value == 'Range') {
                    $("#dtpStartFrom").prop("readonly", true);
                    $("#StartDatetime").prop("readonly", false);
                    $("#EndDatetime").prop("readonly", false);
                    $("#StartDatetime").val(now);
                    $("#EndDatetime").val(now);
                    $("#StartDatetime").attr('min', now);
                    $("#EndDatetime").attr('min', now);
                    //alert($("#StartDatetime").val().slice(0, 19).replace('T', ' ') + $("#EndDatetime").val().slice(0, 19).replace('T', ' '));
                }
            });
        })

    </script>
    <script>
function VMSGlobal() {}
        VMSGlobal.RemoveCookies = "@Url.Action("RemoveCookies", "Home")";
    </script>
    <script>
        //$(document).ready(function () {
        //    $('a[href^="/"]').on('click', function (e) {
        //        Sys.LoadingShow();
        //    });
        //});
        $(document).ready(function () {
            $(document).ajaxError(function (event, request, settings) {
                if (request.responseText != undefined) {
                    var d = JSON.parse(request.responseText);
                    if (d.msg == "SESSION TIMEOUT") {
                        window.location.href = "@Url.Action("Logout", "Home")"
                    }
                    ShiMessage.error("AJAX ERROR!", "Ajax error :" + d.msg);
                }
            });

        });
    </script>
    <script>
        function LoadModalMessage()
        {
            var PositionDelegator = $('#tblDelegator');
            PositionDelegator.empty();
            var PositionDelegated = $('#tblDelegated');
            PositionDelegated.empty();
            $.ajax({
                url: '@Url.Action("LoadModalMessage", "MasterData")',
                method: "POST",
                dataType: "JSON",
                data: {
                },
                success: function (j) {
                    if (j.xdataTable.length > 0) {
                        var itemDelegator = "";
                        var itemDelegated = "";
                        for (var x = 0; x < j.xdataTable.length; x++) {

                            if (j.xdataTable[x].Status == "DELEGATOR") {
                                $('#ModalMessageDelegator').modal('show');
                                $('#HeaderDelegator').html(j.xdataTable[x].Header);
                                itemDelegator += '<table>'
                                itemDelegator += ' <tr>'
                                itemDelegator += '<td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegated Name</td>'
                                itemDelegator += '<td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegator += '<td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatedUserName + '</td>'
                                itemDelegator += '</tr>'
                                itemDelegator += '<tr>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegated Department</td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegator += ' <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatedDepartment + '</td>'
                                itemDelegator += ' </tr>'
                                itemDelegator += ' <tr>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegator Name</td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatorUserName + '</td>'
                                itemDelegator += ' </tr>'
                                itemDelegator += ' <tr>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegator Department</td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatorDepartment + '</td>'
                                itemDelegator += ' </tr>'
                                itemDelegator += ' <tr>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Start Time</td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegator += ' <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].StartTime + '</td>'
                                itemDelegator += '  </tr>'
                                itemDelegator += ' <tr>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">End Time</td>'
                                itemDelegator += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegator += ' <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].EndTime + '</td>'
                                itemDelegator += ' </tr>'
                                itemDelegator += ' </table>'
                                itemDelegator += '<hr>'
                            }
                            if (j.xdataTable[x].Status == "DELEGATED") {
                                $('#ModalMessageDelegated').modal('show');
                                $('#HeaderDelegated').html(j.xdataTable[x].Header);
                                itemDelegated += '<table>'
                                itemDelegated += ' <tr>'
                                itemDelegated += '<td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegated Name</td>'
                                itemDelegated += '<td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegated += '<td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatedUserName + '</td>'
                                itemDelegated += '</tr>'
                                itemDelegated += '<tr>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegated Department</td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegated += ' <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatedDepartment + '</td>'
                                itemDelegated += ' </tr>'
                                itemDelegated += ' <tr>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegator Name</td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatorUserName + '</td>'
                                itemDelegated += ' </tr>'
                                itemDelegated += ' <tr>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Delegator Department</td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].DelegatorDepartment + '</td>'
                                itemDelegated += ' </tr>'
                                itemDelegated += ' <tr>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">Start Time</td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegated += ' <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].StartTime + '</td>'
                                itemDelegated += '  </tr>'
                                itemDelegated += ' <tr>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; font-weight: bold;">End Time</td>'
                                itemDelegated += '  <td style="font-size: 18px; font-family: Times New Roman; padding-left:10px; padding-right:10px; padding-top:5px; padding-bottom:5px;"> : </td>'
                                itemDelegated += ' <td style="font-size: 18px; font-family: Times New Roman; ">' + j.xdataTable[x].EndTime + '</td>'
                                itemDelegated += ' </tr>'
                                itemDelegated += ' </table>'
                                itemDelegated += '<hr>'
                            }
                        }
                        PositionDelegated.append(itemDelegated);
                        PositionDelegator.append(itemDelegator);
                    }
                },
                error: function (xhr, error, text) {
                    toastr.error("Failed Query Get View Table, Please contact IT")
                }
            });
        }
        function fnStopDelegation()
        {
            if (confirm("Confirm to remove existing delegation?") == true) {
                DP.AJaxAll(
                    {}
                    , "@Url.Action("StopDelegation","User")"
                                , function (data) {
                                    if (data.Success) {
                                        toastr.success("Success!", data.Message)

                                    }
                                    else {
                                        ShiMessage.error("Error!", data.Message)
                                    }
                                })
            }
        }
    </script>

</body>
</html>
